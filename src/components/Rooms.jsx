/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 public/models/room.glb
*/

//https://www.youtube.com/watch?v=pXpckHDDNYo

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import gsap from "gsap";
import { useFrame } from '@react-three/fiber';

export const FLOOR_HEIGHT = 2.3;
export const NB_FLOORS = 1;

export function Room(props) {
    const { nodes, materials } = useGLTF('./models/room.glb')
    const ref = useRef();
    const tl = useRef();
    const roomRef = useRef();

    const scroll = useScroll();

    useFrame(() => {
        tl.current.seek(scroll.offset * tl.current.duration());
    });

    useLayoutEffect(() => {
        tl.current = gsap.timeline();

        //vertical animation
        tl.current.to(
            ref.current.position, 
            {
                duration: 2,
                y: -FLOOR_HEIGHT * (NB_FLOORS - 1),
            },
            0
        );

        //whole room
        tl.current.to (
            roomRef.current.position,
            {
                duration: 0.5,
                x: -10, y: -10
            },
            0
        );

        tl.current.to (
            roomRef.current.position,
            {
                duration: 0.5,
                x: 0, y: 0.5
            },
            1
        );

        //rotation
        tl.current.to (
            roomRef.current.rotation,
            {
                duration: 1, x: 0, y: Math.PI / 6, z: 0
            },
            0
        );
        tl.current.to (
            roomRef.current.rotation,
            {
                duration: 1, x: 0, y: -Math.PI / 2, z: 0
            },
            1
        );

    }, []);

    return (
        <group {...props} dispose={null} ref={ref}>
            <group ref = {roomRef}
            position = {[-2, -5, -1]}
                rotation = {[-Math.PI / 7, Math.PI / 6, Math.PI / 10]}>
                <mesh geometry={nodes.wALLS.geometry} material={materials.Material} />
                <mesh geometry={nodes.wALLS_1.geometry} material={materials['[Color M00]']} />
                <mesh geometry={nodes.wALLS_2.geometry} material={materials['[Color M08]']} />
                <mesh geometry={nodes.wALLS_3.geometry} material={materials['[Wood Floor Dark]']} />
                <mesh geometry={nodes.wALLS_4.geometry} material={materials['[Mirror 01]']} />
                <mesh geometry={nodes.wALLS_5.geometry} material={materials['[Translucent Glass Gray]']} />
                <mesh geometry={nodes.wALLS_6.geometry} material={materials['[Wood Bamboo Medium]']} />
                <mesh geometry={nodes.wALLS_7.geometry} material={materials['[Leather Blue]']} />
                <mesh geometry={nodes.wALLS_8.geometry} material={materials['[Suede Blue]']} />
                <mesh geometry={nodes.wALLS_9.geometry} material={materials['[Translucent Glass Blue]']} />
                <mesh geometry={nodes.wALLS_10.geometry} material={materials['[Carpet Loop Pattern]']} />
                <mesh geometry={nodes.wALLS_11.geometry} material={materials.glow} />

            </group>
        </group>
    )
}

useGLTF.preload('./models/room.glb')
